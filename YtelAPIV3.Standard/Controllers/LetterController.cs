/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class LetterController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static LetterController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static LetterController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new LetterController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Remove a letter object by its LetterId.
        /// </summary>
        /// <param name="lettersid">Required parameter: The unique identifier for a letter object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateDeleteLetter(string lettersid)
        {
            Task<string> t = CreateDeleteLetterAsync(lettersid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a letter object by its LetterId.
        /// </summary>
        /// <param name="lettersid">Required parameter: The unique identifier for a letter object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateDeleteLetterAsync(string lettersid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/letter/delete.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "lettersid", lettersid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <param name="lettersid">Required parameter: The unique identifier for a letter object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewLetter(string lettersid)
        {
            Task<string> t = CreateViewLetterAsync(lettersid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a letter object by its LetterSid.
        /// </summary>
        /// <param name="lettersid">Required parameter: The unique identifier for a letter object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewLetterAsync(string lettersid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/letter/viewletter.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "lettersid", lettersid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <param name="to">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="mfrom">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Required parameter: Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">Required parameter: File can be a 8.5"x11" PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Required parameter: Specify if letter should be printed in color.</param>
        /// <param name="description">Optional parameter: A description for the letter.</param>
        /// <param name="extraservice">Optional parameter: Add an extra service to your letter. Options are "certified" or "registered". Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.</param>
        /// <param name="doublesided">Optional parameter: Specify if letter should be printed on both sides.</param>
        /// <param name="template">Optional parameter: Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateLetter(
                string to,
                string mfrom,
                string attachbyid,
                string file,
                string color,
                string description = null,
                string extraservice = null,
                string doublesided = null,
                string template = null,
                string htmldata = null)
        {
            Task<string> t = CreateLetterAsync(to, mfrom, attachbyid, file, color, description, extraservice, doublesided, template, htmldata);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML string.
        /// </summary>
        /// <param name="to">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="mfrom">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Required parameter: Set an existing letter by attaching its LetterId.</param>
        /// <param name="file">Required parameter: File can be a 8.5"x11" PDF uploaded file or URL that links to a file.</param>
        /// <param name="color">Required parameter: Specify if letter should be printed in color.</param>
        /// <param name="description">Optional parameter: A description for the letter.</param>
        /// <param name="extraservice">Optional parameter: Add an extra service to your letter. Options are "certified" or "registered". Certified provides tracking and delivery confirmation for domestic destinations and is an additional $5.00. Registered provides tracking and confirmation for international addresses and is an additional $16.50.</param>
        /// <param name="doublesided">Optional parameter: Specify if letter should be printed on both sides.</param>
        /// <param name="template">Optional parameter: Boolean that defaults to true. When set to false, this specifies that your letter does not follow the m360 address template. In this case, a blank address page will be inserted at the beginning of your file and you will be charged for the extra page.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateLetterAsync(
                string to,
                string mfrom,
                string attachbyid,
                string file,
                string color,
                string description = null,
                string extraservice = null,
                string doublesided = null,
                string template = null,
                string htmldata = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/letter/create.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "to", to ),
                new KeyValuePair<string, object>( "from", mfrom ),
                new KeyValuePair<string, object>( "attachbyid", attachbyid ),
                new KeyValuePair<string, object>( "file", file ),
                new KeyValuePair<string, object>( "color", color ),
                new KeyValuePair<string, object>( "description", description ),
                new KeyValuePair<string, object>( "extraservice", extraservice ),
                new KeyValuePair<string, object>( "doublesided", doublesided ),
                new KeyValuePair<string, object>( "template", template ),
                new KeyValuePair<string, object>( "htmldata", htmldata )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="lettersid">Optional parameter: The unique identifier for a letter object.</param>
        /// <param name="dateCreated">Optional parameter: The date the letter was created.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListLetters(
                int? page = null,
                int? pagesize = null,
                string lettersid = null,
                string dateCreated = null)
        {
            Task<string> t = CreateListLettersAsync(page, pagesize, lettersid, dateCreated);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most recently created letters appearing first.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="lettersid">Optional parameter: The unique identifier for a letter object.</param>
        /// <param name="dateCreated">Optional parameter: The date the letter was created.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListLettersAsync(
                int? page = null,
                int? pagesize = null,
                string lettersid = null,
                string dateCreated = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/letter/listsletter.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "page", page ),
                new KeyValuePair<string, object>( "pagesize", pagesize ),
                new KeyValuePair<string, object>( "lettersid", lettersid ),
                new KeyValuePair<string, object>( "dateCreated", dateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 