/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class ConferenceController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ConferenceController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ConferenceController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ConferenceController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Play an audio file during a conference.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <param name="audioUrl">Required parameter: The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePlayAudio(string conferenceSid, string participantSid, Models.AudioUrlEnum audioUrl)
        {
            Task<string> t = CreatePlayAudioAsync(conferenceSid, participantSid, audioUrl);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Play an audio file during a conference.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <param name="audioUrl">Required parameter: The URL for the audio file that is to be played during the conference. Multiple audio files can be chained by using a semicolon.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePlayAudioAsync(string conferenceSid, string participantSid, Models.AudioUrlEnum audioUrl)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/playAudio.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid ),
                new KeyValuePair<string, object>( "ParticipantSid", participantSid ),
                new KeyValuePair<string, object>( "AudioUrl", Models.AudioUrlEnumHelper.ToValue(audioUrl) )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a participant from a conference.
        /// </summary>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateHangupParticipant(string participantSid, string conferenceSid)
        {
            Task<string> t = CreateHangupParticipantAsync(participantSid, conferenceSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a participant from a conference.
        /// </summary>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateHangupParticipantAsync(string participantSid, string conferenceSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/hangupParticipant.json");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ParticipantSid", participantSid }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier of each conference resource</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewConference(string conferenceSid)
        {
            Task<string> t = CreateViewConferenceAsync(conferenceSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve information about a conference by its ConferenceSid.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier of each conference resource</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewConferenceAsync(string conferenceSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/viewconference.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewParticipant(string conferenceSid, string participantSid)
        {
            Task<string> t = CreateViewParticipantAsync(conferenceSid, participantSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve information about a participant by its ParticipantSid.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantSid">Required parameter: The unique identifier for a participant object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewParticipantAsync(string conferenceSid, string participantSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/viewParticipant.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid ),
                new KeyValuePair<string, object>( "ParticipantSid", participantSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deaf Mute Participant
        /// </summary>
        /// <param name="conferenceSid">Required parameter: ID of the active conference</param>
        /// <param name="participantSid">Required parameter: ID of an active participant</param>
        /// <param name="muted">Optional parameter: Mute a participant</param>
        /// <param name="deaf">Optional parameter: Make it so a participant cant hear</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateSilenceParticipant(
                string conferenceSid,
                string participantSid,
                bool? muted = null,
                bool? deaf = null)
        {
            Task<string> t = CreateSilenceParticipantAsync(conferenceSid, participantSid, muted, deaf);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deaf Mute Participant
        /// </summary>
        /// <param name="conferenceSid">Required parameter: ID of the active conference</param>
        /// <param name="participantSid">Required parameter: ID of an active participant</param>
        /// <param name="muted">Optional parameter: Mute a participant</param>
        /// <param name="deaf">Optional parameter: Make it so a participant cant hear</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateSilenceParticipantAsync(
                string conferenceSid,
                string participantSid,
                bool? muted = null,
                bool? deaf = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/deafMuteParticipant.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "conferenceSid", conferenceSid ),
                new KeyValuePair<string, object>( "ParticipantSid", participantSid ),
                new KeyValuePair<string, object>( "Muted", muted ),
                new KeyValuePair<string, object>( "Deaf", deaf )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add Participant in conference 
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantNumber">Required parameter: The phone number of the participant to be added.</param>
        /// <param name="muted">Optional parameter: Specifies if participant should be muted.</param>
        /// <param name="deaf">Optional parameter: Specifies if the participant should hear audio in the conference.</param>
        /// <return>Returns the string response from the API call</return>
        public string AddParticipant(
                string conferenceSid,
                string participantNumber,
                bool? muted = null,
                bool? deaf = null)
        {
            Task<string> t = AddParticipantAsync(conferenceSid, participantNumber, muted, deaf);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add Participant in conference 
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference object.</param>
        /// <param name="participantNumber">Required parameter: The phone number of the participant to be added.</param>
        /// <param name="muted">Optional parameter: Specifies if participant should be muted.</param>
        /// <param name="deaf">Optional parameter: Specifies if the participant should hear audio in the conference.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> AddParticipantAsync(
                string conferenceSid,
                string participantNumber,
                bool? muted = null,
                bool? deaf = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/addParticipant.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid ),
                new KeyValuePair<string, object>( "ParticipantNumber", participantNumber ),
                new KeyValuePair<string, object>( "Muted", muted ),
                new KeyValuePair<string, object>( "Deaf", deaf )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <param name="url">Required parameter: URL requested once the conference connects</param>
        /// <param name="mfrom">Required parameter: A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">Required parameter: A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallbackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallbackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="record">Optional parameter: Specifies if the conference should be recorded.</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion.</param>
        /// <param name="recordCallBackMethod">Optional parameter: Specifies the HTTP method used to request the required URL once conference connects.</param>
        /// <param name="scheduleTime">Optional parameter: Schedule conference in future. Schedule time must be greater than current time</param>
        /// <param name="timeout">Optional parameter: The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateConference(
                string url,
                string mfrom,
                string to,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallbackUrl = null,
                string fallbackMethod = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                string scheduleTime = null,
                int? timeout = null)
        {
            Task<string> t = CreateConferenceAsync(url, mfrom, to, method, statusCallBackUrl, statusCallBackMethod, fallbackUrl, fallbackMethod, record, recordCallBackUrl, recordCallBackMethod, scheduleTime, timeout);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
        /// </summary>
        /// <param name="url">Required parameter: URL requested once the conference connects</param>
        /// <param name="mfrom">Required parameter: A valid 10-digit number (E.164 format) that will be initiating the conference call.</param>
        /// <param name="to">Required parameter: A valid 10-digit number (E.164 format) that is to receive the conference call.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallbackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallbackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="record">Optional parameter: Specifies if the conference should be recorded.</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion.</param>
        /// <param name="recordCallBackMethod">Optional parameter: Specifies the HTTP method used to request the required URL once conference connects.</param>
        /// <param name="scheduleTime">Optional parameter: Schedule conference in future. Schedule time must be greater than current time</param>
        /// <param name="timeout">Optional parameter: The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateConferenceAsync(
                string url,
                string mfrom,
                string to,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallbackUrl = null,
                string fallbackMethod = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                string scheduleTime = null,
                int? timeout = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/createConference.json");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "Url", url }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", statusCallBackUrl ),
                new KeyValuePair<string, object>( "StatusCallBackMethod", statusCallBackMethod ),
                new KeyValuePair<string, object>( "FallbackUrl", fallbackUrl ),
                new KeyValuePair<string, object>( "FallbackMethod", fallbackMethod ),
                new KeyValuePair<string, object>( "Record", record ),
                new KeyValuePair<string, object>( "RecordCallBackUrl", recordCallBackUrl ),
                new KeyValuePair<string, object>( "RecordCallBackMethod", recordCallBackMethod ),
                new KeyValuePair<string, object>( "ScheduleTime", scheduleTime ),
                new KeyValuePair<string, object>( "Timeout", timeout )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference.</param>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="muted">Optional parameter: Specifies if participant should be muted.</param>
        /// <param name="deaf">Optional parameter: Specifies if the participant should hear audio in the conference.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListParticipants(
                string conferenceSid,
                int? page = null,
                int? pagesize = null,
                bool? muted = null,
                bool? deaf = null)
        {
            Task<string> t = CreateListParticipantsAsync(conferenceSid, page, pagesize, muted, deaf);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of participants for an in-progress conference.
        /// </summary>
        /// <param name="conferenceSid">Required parameter: The unique identifier for a conference.</param>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="muted">Optional parameter: Specifies if participant should be muted.</param>
        /// <param name="deaf">Optional parameter: Specifies if the participant should hear audio in the conference.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListParticipantsAsync(
                string conferenceSid,
                int? page = null,
                int? pagesize = null,
                bool? muted = null,
                bool? deaf = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/listParticipant.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "ConferenceSid", conferenceSid ),
                new KeyValuePair<string, object>( "Page", page ),
                new KeyValuePair<string, object>( "Pagesize", pagesize ),
                new KeyValuePair<string, object>( "Muted", muted ),
                new KeyValuePair<string, object>( "Deaf", deaf )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of conference objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="friendlyName">Optional parameter: Only return conferences with the specified FriendlyName</param>
        /// <param name="dateCreated">Optional parameter: Conference created date</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListConferences(
                int? page = null,
                int? pagesize = null,
                string friendlyName = null,
                string dateCreated = null)
        {
            Task<string> t = CreateListConferencesAsync(page, pagesize, friendlyName, dateCreated);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of conference objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="friendlyName">Optional parameter: Only return conferences with the specified FriendlyName</param>
        /// <param name="dateCreated">Optional parameter: Conference created date</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListConferencesAsync(
                int? page = null,
                int? pagesize = null,
                string friendlyName = null,
                string dateCreated = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/conferences/listconference.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "page", page ),
                new KeyValuePair<string, object>( "pagesize", pagesize ),
                new KeyValuePair<string, object>( "FriendlyName", friendlyName ),
                new KeyValuePair<string, object>( "DateCreated", dateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 