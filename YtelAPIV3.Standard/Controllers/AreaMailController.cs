/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class AreaMailController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static AreaMailController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static AreaMailController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new AreaMailController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Remove an AreaMail object by its AreaMailId.
        /// </summary>
        /// <param name="areamailid">Required parameter: The unique identifier for an AreaMail object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateDeleteAreaMail(string areamailid)
        {
            Task<string> t = CreateDeleteAreaMailAsync(areamailid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an AreaMail object by its AreaMailId.
        /// </summary>
        /// <param name="areamailid">Required parameter: The unique identifier for an AreaMail object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateDeleteAreaMailAsync(string areamailid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/areamail/delete.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "areamailid", areamailid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve an AreaMail object by its AreaMailId.
        /// </summary>
        /// <param name="areamailid">Required parameter: The unique identifier for an AreaMail object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewAreaMail(string areamailid)
        {
            Task<string> t = CreateViewAreaMailAsync(areamailid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve an AreaMail object by its AreaMailId.
        /// </summary>
        /// <param name="areamailid">Required parameter: The unique identifier for an AreaMail object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewAreaMailAsync(string areamailid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/areamail/view.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "areamailid", areamailid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of AreaMail objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="areamailsid">Optional parameter: The unique identifier for an AreaMail object.</param>
        /// <param name="dateCreated">Optional parameter: The date the AreaMail was created.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListAreaMails(
                int? page = null,
                int? pagesize = null,
                string areamailsid = null,
                string dateCreated = null)
        {
            Task<string> t = CreateListAreaMailsAsync(page, pagesize, areamailsid, dateCreated);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of AreaMail objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="areamailsid">Optional parameter: The unique identifier for an AreaMail object.</param>
        /// <param name="dateCreated">Optional parameter: The date the AreaMail was created.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListAreaMailsAsync(
                int? page = null,
                int? pagesize = null,
                string areamailsid = null,
                string dateCreated = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/areamail/lists.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "page", page ),
                new KeyValuePair<string, object>( "pagesize", pagesize ),
                new KeyValuePair<string, object>( "areamailsid", areamailsid ),
                new KeyValuePair<string, object>( "dateCreated", dateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a new AreaMail object.
        /// </summary>
        /// <param name="routes">Required parameter: List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043</param>
        /// <param name="attachbyid">Required parameter: Set an existing areamail by attaching its AreamailId.</param>
        /// <param name="front">Required parameter: The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required</param>
        /// <param name="back">Required parameter: The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="description">Optional parameter: A string value to use as a description for this AreaMail item.</param>
        /// <param name="targettype">Optional parameter: The delivery location type.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateAreaMail(
                string routes,
                string attachbyid,
                string front,
                string back,
                string description = null,
                string targettype = null,
                string htmldata = null)
        {
            Task<string> t = CreateAreaMailAsync(routes, attachbyid, front, back, description, targettype, htmldata);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a new AreaMail object.
        /// </summary>
        /// <param name="routes">Required parameter: List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route.List of routes that AreaMail should be delivered to.  A single route can be either a zipcode or a carrier route. A carrier route is in the form of 92610-C043 where the carrier route is composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3 numbers for carrier route code. Delivery can be sent to mutliple routes by separating them with a commas. Valid Values: 92656, 92610-C043</param>
        /// <param name="attachbyid">Required parameter: Set an existing areamail by attaching its AreamailId.</param>
        /// <param name="front">Required parameter: The front of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required</param>
        /// <param name="back">Required parameter: The back of the AreaMail item to be created. This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="description">Optional parameter: A string value to use as a description for this AreaMail item.</param>
        /// <param name="targettype">Optional parameter: The delivery location type.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateAreaMailAsync(
                string routes,
                string attachbyid,
                string front,
                string back,
                string description = null,
                string targettype = null,
                string htmldata = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/areamail/create.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "routes", routes ),
                new KeyValuePair<string, object>( "attachbyid", attachbyid ),
                new KeyValuePair<string, object>( "front", front ),
                new KeyValuePair<string, object>( "back", back ),
                new KeyValuePair<string, object>( "description", description ),
                new KeyValuePair<string, object>( "targettype", targettype ),
                new KeyValuePair<string, object>( "htmldata", htmldata )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 