/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class SMSController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SMSController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SMSController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SMSController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <param name="messageSid">Required parameter: The unique identifier for a sms message.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewSMS1(string messageSid)
        {
            Task<string> t = CreateViewSMS1Async(messageSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single SMS message object with details by its SmsSid.
        /// </summary>
        /// <param name="messageSid">Required parameter: The unique identifier for a sms message.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewSMS1Async(string messageSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/viewdetailsms.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "MessageSid", messageSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <param name="messageSid">Required parameter: The unique identifier for a sms message.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewSMS(string messageSid)
        {
            Task<string> t = CreateViewSMSAsync(messageSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single SMS message object by its SmsSid.
        /// </summary>
        /// <param name="messageSid">Required parameter: The unique identifier for a sms message.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewSMSAsync(string messageSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/viewsms.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "MessageSid", messageSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Send an SMS from a Ytel number
        /// </summary>
        /// <param name="mfrom">Required parameter: The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">Required parameter: The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">Required parameter: The body message that is to be sent in the text.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once SMS sent.</param>
        /// <param name="messageStatusCallback">Optional parameter: URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.</param>
        /// <param name="smartsms">Optional parameter: Check's 'to' number can receive sms or not using Carrier API, if wireless = true then text sms is sent, else wireless = false then call is recieved to end user with audible message.</param>
        /// <param name="deliveryStatus">Optional parameter: Delivery reports are a method to tell your system if the message has arrived on the destination phone.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateSendSMS(
                string mfrom,
                string to,
                string body,
                string method = null,
                string messageStatusCallback = null,
                bool? smartsms = null,
                bool? deliveryStatus = null)
        {
            Task<string> t = CreateSendSMSAsync(mfrom, to, body, method, messageStatusCallback, smartsms, deliveryStatus);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Send an SMS from a Ytel number
        /// </summary>
        /// <param name="mfrom">Required parameter: The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.</param>
        /// <param name="to">Required parameter: The 10-digit phone number (E.164 format) that will receive the message.</param>
        /// <param name="body">Required parameter: The body message that is to be sent in the text.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once SMS sent.</param>
        /// <param name="messageStatusCallback">Optional parameter: URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be sent here once the SMS is finished.</param>
        /// <param name="smartsms">Optional parameter: Check's 'to' number can receive sms or not using Carrier API, if wireless = true then text sms is sent, else wireless = false then call is recieved to end user with audible message.</param>
        /// <param name="deliveryStatus">Optional parameter: Delivery reports are a method to tell your system if the message has arrived on the destination phone.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateSendSMSAsync(
                string mfrom,
                string to,
                string body,
                string method = null,
                string messageStatusCallback = null,
                bool? smartsms = null,
                bool? deliveryStatus = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/sendsms.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "Body", body ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "MessageStatusCallback", messageStatusCallback ),
                new KeyValuePair<string, object>( "Smartsms", smartsms ),
                new KeyValuePair<string, object>( "DeliveryStatus", deliveryStatus )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="mfrom">Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).</param>
        /// <param name="to">Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).</param>
        /// <param name="dateSent">Optional parameter: Only list SMS messages sent in the specified date range</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListSMS(
                int? page = null,
                int? pageSize = null,
                string mfrom = null,
                string to = null,
                string dateSent = null)
        {
            Task<string> t = CreateListSMSAsync(page, pageSize, mfrom, to, dateSent);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of Outbound SMS message objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="mfrom">Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).</param>
        /// <param name="to">Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).</param>
        /// <param name="dateSent">Optional parameter: Only list SMS messages sent in the specified date range</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListSMSAsync(
                int? page = null,
                int? pageSize = null,
                string mfrom = null,
                string to = null,
                string dateSent = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/listsms.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", page ),
                new KeyValuePair<string, object>( "PageSize", pageSize ),
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "DateSent", dateSent )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="mfrom">Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).</param>
        /// <param name="to">Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).</param>
        /// <param name="dateSent">Optional parameter: Filter sms message objects by this date.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListInboundSMS(
                int? page = null,
                int? pageSize = null,
                string mfrom = null,
                string to = null,
                string dateSent = null)
        {
            Task<string> t = CreateListInboundSMSAsync(page, pageSize, mfrom, to, dateSent);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of Inbound SMS message objects.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="mfrom">Optional parameter: Filter SMS message objects from this valid 10-digit phone number (E.164 format).</param>
        /// <param name="to">Optional parameter: Filter SMS message objects to this valid 10-digit phone number (E.164 format).</param>
        /// <param name="dateSent">Optional parameter: Filter sms message objects by this date.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListInboundSMSAsync(
                int? page = null,
                int? pageSize = null,
                string mfrom = null,
                string to = null,
                string dateSent = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/getinboundsms.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", page ),
                new KeyValuePair<string, object>( "PageSize", pageSize ),
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "DateSent", dateSent )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 