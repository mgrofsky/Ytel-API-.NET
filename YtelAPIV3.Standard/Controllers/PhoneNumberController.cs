/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class PhoneNumberController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PhoneNumberController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PhoneNumberController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PhoneNumberController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get DID Score Number
        /// </summary>
        /// <param name="phonenumber">Required parameter: Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateGetDIDScore(string phonenumber)
        {
            Task<string> t = CreateGetDIDScoreAsync(phonenumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get DID Score Number
        /// </summary>
        /// <param name="phonenumber">Required parameter: Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateGetDIDScoreAsync(string phonenumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/getdidscore.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Phonenumber", phonenumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <param name="phonenumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">Required parameter: A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">Required parameter: A specific Accountsid to which Number is getting transfer.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateMoveNumber(string phonenumber, string fromaccountsid, string toaccountsid)
        {
            Task<string> t = CreateMoveNumberAsync(phonenumber, fromaccountsid, toaccountsid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <param name="phonenumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <param name="fromaccountsid">Required parameter: A specific Accountsid from where Number is getting transfer.</param>
        /// <param name="toaccountsid">Required parameter: A specific Accountsid to which Number is getting transfer.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateMoveNumberAsync(string phonenumber, string fromaccountsid, string toaccountsid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/transferphonenumbers.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "phonenumber", phonenumber ),
                new KeyValuePair<string, object>( "fromaccountsid", fromaccountsid ),
                new KeyValuePair<string, object>( "toaccountsid", toaccountsid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePurchaseNumber(string phoneNumber)
        {
            Task<string> t = CreatePurchaseNumberAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePurchaseNumberAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/buynumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="responseType">Required parameter: Response type format xml or json</param>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateReleaseNumber(string responseType, string phoneNumber)
        {
            Task<string> t = CreateReleaseNumberAsync(responseType, phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="responseType">Required parameter: Response type format xml or json</param>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateReleaseNumberAsync(string responseType, string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/releasenumber.{ResponseType}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ResponseType", responseType }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve the details for a phone number by its number.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewDetails(string phoneNumber)
        {
            Task<string> t = CreateViewDetailsAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve the details for a phone number by its number.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewDetailsAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/viewnumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel comma separated numbers (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateBulkRelease(string phoneNumber)
        {
            Task<string> t = CreateBulkReleaseAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel comma separated numbers (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateBulkReleaseAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/massreleasenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <param name="numbertype">Required parameter: Number type either SMS,Voice or all</param>
        /// <param name="areacode">Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateAvailableNumbers(Models.NumbertypeEnum numbertype, string areacode, int? pagesize = null)
        {
            Task<string> t = CreateAvailableNumbersAsync(numbertype, areacode, pagesize);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <param name="numbertype">Required parameter: Number type either SMS,Voice or all</param>
        /// <param name="areacode">Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateAvailableNumbersAsync(Models.NumbertypeEnum numbertype, string areacode, int? pagesize = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/availablenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "numbertype", Models.NumbertypeEnumHelper.ToValue(numbertype) ),
                new KeyValuePair<string, object>( "areacode", areacode ),
                new KeyValuePair<string, object>( "pagesize", pagesize )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">Required parameter: URL requested once the call connects</param>
        /// <param name="friendlyName">Optional parameter: Phone number friendly name description</param>
        /// <param name="voiceMethod">Optional parameter: Post or Get</param>
        /// <param name="voiceFallbackUrl">Optional parameter: URL requested if the voice URL is not available</param>
        /// <param name="voiceFallbackMethod">Optional parameter: Post or Get</param>
        /// <param name="hangupCallback">Optional parameter: callback url after a hangup occurs</param>
        /// <param name="hangupCallbackMethod">Optional parameter: Post or Get</param>
        /// <param name="heartbeatUrl">Optional parameter: URL requested once the call connects</param>
        /// <param name="heartbeatMethod">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time</param>
        /// <param name="smsUrl">Optional parameter: URL requested when an SMS is received</param>
        /// <param name="smsMethod">Optional parameter: Post or Get</param>
        /// <param name="smsFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.</param>
        /// <param name="smsFallbackMethod">Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.</param>
        /// <return>Returns the string response from the API call</return>
        public string UpdateNumber(
                string phoneNumber,
                string voiceUrl,
                string friendlyName = null,
                string voiceMethod = null,
                string voiceFallbackUrl = null,
                string voiceFallbackMethod = null,
                string hangupCallback = null,
                string hangupCallbackMethod = null,
                string heartbeatUrl = null,
                string heartbeatMethod = null,
                string smsUrl = null,
                string smsMethod = null,
                string smsFallbackUrl = null,
                string smsFallbackMethod = null)
        {
            Task<string> t = UpdateNumberAsync(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel number (E.164 format).</param>
        /// <param name="voiceUrl">Required parameter: URL requested once the call connects</param>
        /// <param name="friendlyName">Optional parameter: Phone number friendly name description</param>
        /// <param name="voiceMethod">Optional parameter: Post or Get</param>
        /// <param name="voiceFallbackUrl">Optional parameter: URL requested if the voice URL is not available</param>
        /// <param name="voiceFallbackMethod">Optional parameter: Post or Get</param>
        /// <param name="hangupCallback">Optional parameter: callback url after a hangup occurs</param>
        /// <param name="hangupCallbackMethod">Optional parameter: Post or Get</param>
        /// <param name="heartbeatUrl">Optional parameter: URL requested once the call connects</param>
        /// <param name="heartbeatMethod">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time</param>
        /// <param name="smsUrl">Optional parameter: URL requested when an SMS is received</param>
        /// <param name="smsMethod">Optional parameter: Post or Get</param>
        /// <param name="smsFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.</param>
        /// <param name="smsFallbackMethod">Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> UpdateNumberAsync(
                string phoneNumber,
                string voiceUrl,
                string friendlyName = null,
                string voiceMethod = null,
                string voiceFallbackUrl = null,
                string voiceFallbackMethod = null,
                string hangupCallback = null,
                string hangupCallbackMethod = null,
                string heartbeatUrl = null,
                string heartbeatMethod = null,
                string smsUrl = null,
                string smsMethod = null,
                string smsFallbackUrl = null,
                string smsFallbackMethod = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/updatenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber ),
                new KeyValuePair<string, object>( "VoiceUrl", voiceUrl ),
                new KeyValuePair<string, object>( "FriendlyName", friendlyName ),
                new KeyValuePair<string, object>( "VoiceMethod", voiceMethod ),
                new KeyValuePair<string, object>( "VoiceFallbackUrl", voiceFallbackUrl ),
                new KeyValuePair<string, object>( "VoiceFallbackMethod", voiceFallbackMethod ),
                new KeyValuePair<string, object>( "HangupCallback", hangupCallback ),
                new KeyValuePair<string, object>( "HangupCallbackMethod", hangupCallbackMethod ),
                new KeyValuePair<string, object>( "HeartbeatUrl", heartbeatUrl ),
                new KeyValuePair<string, object>( "HeartbeatMethod", heartbeatMethod ),
                new KeyValuePair<string, object>( "SmsUrl", smsUrl ),
                new KeyValuePair<string, object>( "SmsMethod", smsMethod ),
                new KeyValuePair<string, object>( "SmsFallbackUrl", smsFallbackUrl ),
                new KeyValuePair<string, object>( "SmsFallbackMethod", smsFallbackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <param name="page">Optional parameter: Which page of the overall response will be returned. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="numberType">Optional parameter: The capability supported by the number.Number type either SMS,Voice or all</param>
        /// <param name="friendlyName">Optional parameter: A human-readable label added to the number object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListNumbers(
                int? page = null,
                int? pageSize = null,
                Models.NumberType14Enum? numberType = null,
                string friendlyName = null)
        {
            Task<string> t = CreateListNumbersAsync(page, pageSize, numberType, friendlyName);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <param name="page">Optional parameter: Which page of the overall response will be returned. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="numberType">Optional parameter: The capability supported by the number.Number type either SMS,Voice or all</param>
        /// <param name="friendlyName">Optional parameter: A human-readable label added to the number object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListNumbersAsync(
                int? page = null,
                int? pageSize = null,
                Models.NumberType14Enum? numberType = null,
                string friendlyName = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/listnumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", page ),
                new KeyValuePair<string, object>( "PageSize", pageSize ),
                new KeyValuePair<string, object>( "NumberType", (numberType.HasValue) ? Models.NumberType14EnumHelper.ToValue(numberType.Value) : null ),
                new KeyValuePair<string, object>( "FriendlyName", friendlyName )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">Required parameter: The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">Optional parameter: A human-readable value for labeling the number.</param>
        /// <param name="voiceMethod">Optional parameter: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.</param>
        /// <param name="voiceFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url</param>
        /// <param name="voiceFallbackMethod">Optional parameter: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.</param>
        /// <param name="hangupCallback">Optional parameter: URL that can be requested to receive notification when and how incoming call has ended.</param>
        /// <param name="hangupCallbackMethod">Optional parameter: The HTTP method Ytel will use when requesting the HangupCallback URL.</param>
        /// <param name="heartbeatUrl">Optional parameter: URL that can be used to monitor the phone number.</param>
        /// <param name="heartbeatMethod">Optional parameter: The HTTP method Ytel will use when requesting the HeartbeatUrl.</param>
        /// <param name="smsUrl">Optional parameter: URL requested when an SMS is received.</param>
        /// <param name="smsMethod">Optional parameter: The HTTP method Ytel will use when requesting the SmsUrl.</param>
        /// <param name="smsFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.</param>
        /// <param name="smsFallbackMethod">Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateBulkUpdateNumbers(
                string phoneNumber,
                string voiceUrl,
                string friendlyName = null,
                string voiceMethod = null,
                string voiceFallbackUrl = null,
                string voiceFallbackMethod = null,
                string hangupCallback = null,
                string hangupCallbackMethod = null,
                string heartbeatUrl = null,
                string heartbeatMethod = null,
                string smsUrl = null,
                string smsMethod = null,
                string smsFallbackUrl = null,
                string smsFallbackMethod = null)
        {
            Task<string> t = CreateBulkUpdateNumbersAsync(phoneNumber, voiceUrl, friendlyName, voiceMethod, voiceFallbackUrl, voiceFallbackMethod, hangupCallback, hangupCallbackMethod, heartbeatUrl, heartbeatMethod, smsUrl, smsMethod, smsFallbackUrl, smsFallbackMethod);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid comma(,) separated Ytel numbers. (E.164 format).</param>
        /// <param name="voiceUrl">Required parameter: The URL returning InboundXML incoming calls should execute when connected.</param>
        /// <param name="friendlyName">Optional parameter: A human-readable value for labeling the number.</param>
        /// <param name="voiceMethod">Optional parameter: Specifies the HTTP method used to request the VoiceUrl once incoming call connects.</param>
        /// <param name="voiceFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML on a call or at initial request of the voice url</param>
        /// <param name="voiceFallbackMethod">Optional parameter: Specifies the HTTP method used to request the VoiceFallbackUrl once incoming call connects.</param>
        /// <param name="hangupCallback">Optional parameter: URL that can be requested to receive notification when and how incoming call has ended.</param>
        /// <param name="hangupCallbackMethod">Optional parameter: The HTTP method Ytel will use when requesting the HangupCallback URL.</param>
        /// <param name="heartbeatUrl">Optional parameter: URL that can be used to monitor the phone number.</param>
        /// <param name="heartbeatMethod">Optional parameter: The HTTP method Ytel will use when requesting the HeartbeatUrl.</param>
        /// <param name="smsUrl">Optional parameter: URL requested when an SMS is received.</param>
        /// <param name="smsMethod">Optional parameter: The HTTP method Ytel will use when requesting the SmsUrl.</param>
        /// <param name="smsFallbackUrl">Optional parameter: URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the SmsUrl.</param>
        /// <param name="smsFallbackMethod">Optional parameter: The HTTP method Ytel will use when URL requested if the SmsUrl is not available.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateBulkUpdateNumbersAsync(
                string phoneNumber,
                string voiceUrl,
                string friendlyName = null,
                string voiceMethod = null,
                string voiceFallbackUrl = null,
                string voiceFallbackMethod = null,
                string hangupCallback = null,
                string hangupCallbackMethod = null,
                string heartbeatUrl = null,
                string heartbeatMethod = null,
                string smsUrl = null,
                string smsMethod = null,
                string smsFallbackUrl = null,
                string smsFallbackMethod = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/massupdatenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber ),
                new KeyValuePair<string, object>( "VoiceUrl", voiceUrl ),
                new KeyValuePair<string, object>( "FriendlyName", friendlyName ),
                new KeyValuePair<string, object>( "VoiceMethod", voiceMethod ),
                new KeyValuePair<string, object>( "VoiceFallbackUrl", voiceFallbackUrl ),
                new KeyValuePair<string, object>( "VoiceFallbackMethod", voiceFallbackMethod ),
                new KeyValuePair<string, object>( "HangupCallback", hangupCallback ),
                new KeyValuePair<string, object>( "HangupCallbackMethod", hangupCallbackMethod ),
                new KeyValuePair<string, object>( "HeartbeatUrl", heartbeatUrl ),
                new KeyValuePair<string, object>( "HeartbeatMethod", heartbeatMethod ),
                new KeyValuePair<string, object>( "SmsUrl", smsUrl ),
                new KeyValuePair<string, object>( "SmsMethod", smsMethod ),
                new KeyValuePair<string, object>( "SmsFallbackUrl", smsFallbackUrl ),
                new KeyValuePair<string, object>( "SmsFallbackMethod", smsFallbackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <param name="numberType">Required parameter: The capability the number supports.</param>
        /// <param name="areaCode">Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">Required parameter: A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">Optional parameter: If desired quantity is unavailable purchase what is available .</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateBulkBuyNumbers(
                Models.NumberType15Enum numberType,
                string areaCode,
                string quantity,
                string leftover = null)
        {
            Task<string> t = CreateBulkBuyNumbersAsync(numberType, areaCode, quantity, leftover);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <param name="numberType">Required parameter: The capability the number supports.</param>
        /// <param name="areaCode">Required parameter: Specifies the area code for the returned list of available numbers. Only available for North American numbers.</param>
        /// <param name="quantity">Required parameter: A positive integer that tells how many number you want to buy at a time.</param>
        /// <param name="leftover">Optional parameter: If desired quantity is unavailable purchase what is available .</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateBulkBuyNumbersAsync(
                Models.NumberType15Enum numberType,
                string areaCode,
                string quantity,
                string leftover = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/bulkbuy.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "NumberType", Models.NumberType15EnumHelper.ToValue(numberType) ),
                new KeyValuePair<string, object>( "AreaCode", areaCode ),
                new KeyValuePair<string, object>( "Quantity", quantity ),
                new KeyValuePair<string, object>( "Leftover", leftover )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 