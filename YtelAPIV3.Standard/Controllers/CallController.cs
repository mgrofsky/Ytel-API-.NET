/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class CallController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static CallController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static CallController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new CallController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewCall1(string callSid)
        {
            Task<string> t = CreateViewCall1Async(callSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewCall1Async(string callSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/viewcalldetail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "callSid", callSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callsid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewCall(string callsid)
        {
            Task<string> t = CreateViewCallAsync(callsid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callsid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewCallAsync(string callsid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/viewcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "callsid", callsid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Play Dtmf and send the Digit
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="playDtmf">Required parameter: DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">Optional parameter: The leg of the call DTMF digits should be sent to</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePlayDTMF(string callSid, string playDtmf, Models.PlayDtmfDirectionEnum? playDtmfDirection = null)
        {
            Task<string> t = CreatePlayDTMFAsync(callSid, playDtmf, playDtmfDirection);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Play Dtmf and send the Digit
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="playDtmf">Required parameter: DTMF digits to play to the call. 0-9, #, *, W, or w</param>
        /// <param name="playDtmfDirection">Optional parameter: The leg of the call DTMF digits should be sent to</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePlayDTMFAsync(string callSid, string playDtmf, Models.PlayDtmfDirectionEnum? playDtmfDirection = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/senddigits.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", callSid ),
                new KeyValuePair<string, object>( "PlayDtmf", playDtmf ),
                new KeyValuePair<string, object>( "PlayDtmfDirection", (playDtmfDirection.HasValue) ? Models.PlayDtmfDirectionEnumHelper.ToValue(playDtmfDirection.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <param name="mfrom">Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">Required parameter: To number</param>
        /// <param name="url">Required parameter: URL requested once the call connects</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallBackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallBackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="heartBeatUrl">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed tim</param>
        /// <param name="heartBeatMethod">Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.</param>
        /// <param name="timeout">Optional parameter: Time (in seconds) Ytel should wait while the call is ringing before canceling the call</param>
        /// <param name="playDtmf">Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *</param>
        /// <param name="hideCallerId">Optional parameter: Specifies if the caller id will be hidden</param>
        /// <param name="record">Optional parameter: Specifies if the call should be recorded</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion</param>
        /// <param name="recordCallBackMethod">Optional parameter: Method used to request the RecordCallback URL.</param>
        /// <param name="transcribe">Optional parameter: Specifies if the call recording should be transcribed</param>
        /// <param name="transcribeCallBackUrl">Optional parameter: Transcription parameters will be sent here upon completion</param>
        /// <param name="ifMachine">Optional parameter: How Ytel should handle the receiving numbers voicemail machine</param>
        /// <param name="ifMachineUrl">Optional parameter: URL requested when IfMachine=continue</param>
        /// <param name="ifMachineMethod">Optional parameter: Method used to request the IfMachineUrl.</param>
        /// <param name="feedback">Optional parameter: Specify if survey should be enable or not</param>
        /// <param name="surveyId">Optional parameter: The unique identifier for the survey.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateMakeCall(
                string mfrom,
                string to,
                string url,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallBackUrl = null,
                string fallBackMethod = null,
                string heartBeatUrl = null,
                string heartBeatMethod = null,
                int? timeout = null,
                string playDtmf = null,
                bool? hideCallerId = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                bool? transcribe = null,
                string transcribeCallBackUrl = null,
                Models.IfMachineEnum? ifMachine = null,
                string ifMachineUrl = null,
                string ifMachineMethod = null,
                bool? feedback = null,
                string surveyId = null)
        {
            Task<string> t = CreateMakeCallAsync(mfrom, to, url, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl, ifMachine, ifMachineUrl, ifMachineMethod, feedback, surveyId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <param name="mfrom">Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="to">Required parameter: To number</param>
        /// <param name="url">Required parameter: URL requested once the call connects</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallBackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallBackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="heartBeatUrl">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed tim</param>
        /// <param name="heartBeatMethod">Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.</param>
        /// <param name="timeout">Optional parameter: Time (in seconds) Ytel should wait while the call is ringing before canceling the call</param>
        /// <param name="playDtmf">Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *</param>
        /// <param name="hideCallerId">Optional parameter: Specifies if the caller id will be hidden</param>
        /// <param name="record">Optional parameter: Specifies if the call should be recorded</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion</param>
        /// <param name="recordCallBackMethod">Optional parameter: Method used to request the RecordCallback URL.</param>
        /// <param name="transcribe">Optional parameter: Specifies if the call recording should be transcribed</param>
        /// <param name="transcribeCallBackUrl">Optional parameter: Transcription parameters will be sent here upon completion</param>
        /// <param name="ifMachine">Optional parameter: How Ytel should handle the receiving numbers voicemail machine</param>
        /// <param name="ifMachineUrl">Optional parameter: URL requested when IfMachine=continue</param>
        /// <param name="ifMachineMethod">Optional parameter: Method used to request the IfMachineUrl.</param>
        /// <param name="feedback">Optional parameter: Specify if survey should be enable or not</param>
        /// <param name="surveyId">Optional parameter: The unique identifier for the survey.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateMakeCallAsync(
                string mfrom,
                string to,
                string url,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallBackUrl = null,
                string fallBackMethod = null,
                string heartBeatUrl = null,
                string heartBeatMethod = null,
                int? timeout = null,
                string playDtmf = null,
                bool? hideCallerId = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                bool? transcribe = null,
                string transcribeCallBackUrl = null,
                Models.IfMachineEnum? ifMachine = null,
                string ifMachineUrl = null,
                string ifMachineMethod = null,
                bool? feedback = null,
                string surveyId = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/makecall.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "Url", url ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", statusCallBackUrl ),
                new KeyValuePair<string, object>( "StatusCallBackMethod", statusCallBackMethod ),
                new KeyValuePair<string, object>( "FallBackUrl", fallBackUrl ),
                new KeyValuePair<string, object>( "FallBackMethod", fallBackMethod ),
                new KeyValuePair<string, object>( "HeartBeatUrl", heartBeatUrl ),
                new KeyValuePair<string, object>( "HeartBeatMethod", heartBeatMethod ),
                new KeyValuePair<string, object>( "Timeout", timeout ),
                new KeyValuePair<string, object>( "PlayDtmf", playDtmf ),
                new KeyValuePair<string, object>( "HideCallerId", hideCallerId ),
                new KeyValuePair<string, object>( "Record", record ),
                new KeyValuePair<string, object>( "RecordCallBackUrl", recordCallBackUrl ),
                new KeyValuePair<string, object>( "RecordCallBackMethod", recordCallBackMethod ),
                new KeyValuePair<string, object>( "Transcribe", transcribe ),
                new KeyValuePair<string, object>( "TranscribeCallBackUrl", transcribeCallBackUrl ),
                new KeyValuePair<string, object>( "IfMachine", (ifMachine.HasValue) ? Models.IfMachineEnumHelper.ToValue(ifMachine.Value) : null ),
                new KeyValuePair<string, object>( "IfMachineUrl", ifMachineUrl ),
                new KeyValuePair<string, object>( "IfMachineMethod", ifMachineMethod ),
                new KeyValuePair<string, object>( "Feedback", feedback ),
                new KeyValuePair<string, object>( "SurveyId", surveyId )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Play Audio from a url
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="audioUrl">Required parameter: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Required parameter: Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Optional parameter: Time limit in seconds for audio play back</param>
        /// <param name="direction">Optional parameter: The leg of the call audio will be played to</param>
        /// <param name="mix">Optional parameter: If false, all other audio will be muted</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePlayAudio(
                string callSid,
                string audioUrl,
                string sayText,
                int? length = null,
                Models.DirectionEnum? direction = null,
                bool? mix = null)
        {
            Task<string> t = CreatePlayAudioAsync(callSid, audioUrl, sayText, length, direction, mix);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Play Audio from a url
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="audioUrl">Required parameter: URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http://example.com/audio1.mp3;http://example.com/audio2.wav</param>
        /// <param name="sayText">Required parameter: Valid alphanumeric string that should be played to the In-progress call.</param>
        /// <param name="length">Optional parameter: Time limit in seconds for audio play back</param>
        /// <param name="direction">Optional parameter: The leg of the call audio will be played to</param>
        /// <param name="mix">Optional parameter: If false, all other audio will be muted</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePlayAudioAsync(
                string callSid,
                string audioUrl,
                string sayText,
                int? length = null,
                Models.DirectionEnum? direction = null,
                bool? mix = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/playaudios.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", callSid ),
                new KeyValuePair<string, object>( "AudioUrl", audioUrl ),
                new KeyValuePair<string, object>( "SayText", sayText ),
                new KeyValuePair<string, object>( "Length", length ),
                new KeyValuePair<string, object>( "Direction", (direction.HasValue) ? Models.DirectionEnumHelper.ToValue(direction.Value) : null ),
                new KeyValuePair<string, object>( "Mix", mix )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="record">Required parameter: Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">Optional parameter: The leg of the call to record</param>
        /// <param name="timeLimit">Optional parameter: Time in seconds the recording duration should not exceed</param>
        /// <param name="callBackUrl">Optional parameter: URL consulted after the recording completes</param>
        /// <param name="fileformat">Optional parameter: Format of the recording file. Can be .mp3 or .wav</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRecordCall(
                string callSid,
                bool record,
                Models.Direction4Enum? direction = null,
                int? timeLimit = null,
                string callBackUrl = null,
                Models.FileformatEnum? fileformat = null)
        {
            Task<string> t = CreateRecordCallAsync(callSid, record, direction, timeLimit, callBackUrl, fileformat);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier of each call resource</param>
        /// <param name="record">Required parameter: Set true to initiate recording or false to terminate recording</param>
        /// <param name="direction">Optional parameter: The leg of the call to record</param>
        /// <param name="timeLimit">Optional parameter: Time in seconds the recording duration should not exceed</param>
        /// <param name="callBackUrl">Optional parameter: URL consulted after the recording completes</param>
        /// <param name="fileformat">Optional parameter: Format of the recording file. Can be .mp3 or .wav</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRecordCallAsync(
                string callSid,
                bool record,
                Models.Direction4Enum? direction = null,
                int? timeLimit = null,
                string callBackUrl = null,
                Models.FileformatEnum? fileformat = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/recordcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", callSid ),
                new KeyValuePair<string, object>( "Record", record ),
                new KeyValuePair<string, object>( "Direction", (direction.HasValue) ? Models.Direction4EnumHelper.ToValue(direction.Value) : null ),
                new KeyValuePair<string, object>( "TimeLimit", timeLimit ),
                new KeyValuePair<string, object>( "CallBackUrl", callBackUrl ),
                new KeyValuePair<string, object>( "Fileformat", (fileformat.HasValue) ? Models.FileformatEnumHelper.ToValue(fileformat.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">Optional parameter: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.</param>
        /// <param name="pitchSemiTones">Optional parameter: Set the pitch in semitone (half-step) intervals. Value between -14 and 14</param>
        /// <param name="pitchOctaves">Optional parameter: Set the pitch in octave intervals.. Value between -1 and 1</param>
        /// <param name="pitch">Optional parameter: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0</param>
        /// <param name="rate">Optional parameter: Set the rate for audio. The lower the value, the lower the rate. value greater than 0</param>
        /// <param name="tempo">Optional parameter: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateVoiceEffect(
                string callSid,
                Models.AudioDirectionEnum? audioDirection = null,
                double? pitchSemiTones = null,
                double? pitchOctaves = null,
                double? pitch = null,
                double? rate = null,
                double? tempo = null)
        {
            Task<string> t = CreateVoiceEffectAsync(callSid, audioDirection, pitchSemiTones, pitchOctaves, pitch, rate, tempo);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the in-progress voice call.</param>
        /// <param name="audioDirection">Optional parameter: The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio stream. If OUT, the effects will occur on the outgoing audio stream.</param>
        /// <param name="pitchSemiTones">Optional parameter: Set the pitch in semitone (half-step) intervals. Value between -14 and 14</param>
        /// <param name="pitchOctaves">Optional parameter: Set the pitch in octave intervals.. Value between -1 and 1</param>
        /// <param name="pitch">Optional parameter: Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater than 0</param>
        /// <param name="rate">Optional parameter: Set the rate for audio. The lower the value, the lower the rate. value greater than 0</param>
        /// <param name="tempo">Optional parameter: Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateVoiceEffectAsync(
                string callSid,
                Models.AudioDirectionEnum? audioDirection = null,
                double? pitchSemiTones = null,
                double? pitchOctaves = null,
                double? pitch = null,
                double? rate = null,
                double? tempo = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/voiceeffect.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", callSid ),
                new KeyValuePair<string, object>( "AudioDirection", (audioDirection.HasValue) ? Models.AudioDirectionEnumHelper.ToValue(audioDirection.Value) : null ),
                new KeyValuePair<string, object>( "PitchSemiTones", pitchSemiTones ),
                new KeyValuePair<string, object>( "PitchOctaves", pitchOctaves ),
                new KeyValuePair<string, object>( "Pitch", pitch ),
                new KeyValuePair<string, object>( "Rate", rate ),
                new KeyValuePair<string, object>( "Tempo", tempo )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Interrupt the Call by Call Sid
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for voice call that is in progress.</param>
        /// <param name="url">Optional parameter: URL the in-progress call will be redirected to</param>
        /// <param name="method">Optional parameter: The method used to request the above Url parameter</param>
        /// <param name="status">Optional parameter: Status to set the in-progress call to</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateInterruptCall(
                string callSid,
                string url = null,
                string method = null,
                Models.StatusEnum? status = null)
        {
            Task<string> t = CreateInterruptCallAsync(callSid, url, method, status);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Interrupt the Call by Call Sid
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for voice call that is in progress.</param>
        /// <param name="url">Optional parameter: URL the in-progress call will be redirected to</param>
        /// <param name="method">Optional parameter: The method used to request the above Url parameter</param>
        /// <param name="status">Optional parameter: Status to set the in-progress call to</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateInterruptCallAsync(
                string callSid,
                string url = null,
                string method = null,
                Models.StatusEnum? status = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/interruptcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", callSid ),
                new KeyValuePair<string, object>( "Url", url ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "Status", (status.HasValue) ? Models.StatusEnumHelper.ToValue(status.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// A list of calls associated with your Ytel account
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="to">Optional parameter: Filter calls that were sent to this 10-digit number (E.164 format).</param>
        /// <param name="mfrom">Optional parameter: Filter calls that were sent from this 10-digit number (E.164 format).</param>
        /// <param name="dateCreated">Optional parameter: Return calls that are from a specified date.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListCalls(
                int? page = null,
                int? pageSize = null,
                string to = null,
                string mfrom = null,
                string dateCreated = null)
        {
            Task<string> t = CreateListCallsAsync(page, pageSize, to, mfrom, dateCreated);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// A list of calls associated with your Ytel account
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pageSize">Optional parameter: Number of individual resources listed in the response per page</param>
        /// <param name="to">Optional parameter: Filter calls that were sent to this 10-digit number (E.164 format).</param>
        /// <param name="mfrom">Optional parameter: Filter calls that were sent from this 10-digit number (E.164 format).</param>
        /// <param name="dateCreated">Optional parameter: Return calls that are from a specified date.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListCallsAsync(
                int? page = null,
                int? pageSize = null,
                string to = null,
                string mfrom = null,
                string dateCreated = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/listcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", page ),
                new KeyValuePair<string, object>( "PageSize", pageSize ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "DateCreated", dateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <param name="mfrom">Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">Required parameter: A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">Required parameter: A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">Required parameter: The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statsCallBackMethod">Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateSendRVM(
                string mfrom,
                string rVMCallerId,
                string to,
                string voiceMailURL,
                string method = null,
                string statusCallBackUrl = null,
                string statsCallBackMethod = null)
        {
            Task<string> t = CreateSendRVMAsync(mfrom, rVMCallerId, to, voiceMailURL, method, statusCallBackUrl, statsCallBackMethod);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <param name="mfrom">Required parameter: A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.</param>
        /// <param name="rVMCallerId">Required parameter: A required secondary Caller ID for RVM to work.</param>
        /// <param name="to">Required parameter: A valid number (E.164 format) that will receive the phone call.</param>
        /// <param name="voiceMailURL">Required parameter: The URL requested once the RVM connects. A set of default parameters will be sent here.</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statsCallBackMethod">Optional parameter: Specifies the HTTP method used to request the required StatusCallBackUrl once call connects.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateSendRVMAsync(
                string mfrom,
                string rVMCallerId,
                string to,
                string voiceMailURL,
                string method = null,
                string statusCallBackUrl = null,
                string statsCallBackMethod = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/makervm.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "RVMCallerId", rVMCallerId ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "VoiceMailURL", voiceMailURL ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", statusCallBackUrl ),
                new KeyValuePair<string, object>( "StatsCallBackMethod", statsCallBackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Group Call
        /// </summary>
        /// <param name="mfrom">Required parameter: This number to display on Caller ID as calling</param>
        /// <param name="to">Required parameter: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">Required parameter: URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Required parameter: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Required parameter: Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallBackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallBackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="heartBeatUrl">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.</param>
        /// <param name="heartBeatMethod">Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.</param>
        /// <param name="timeout">Optional parameter: Time (in seconds) we should wait while the call is ringing before canceling the call</param>
        /// <param name="playDtmf">Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *</param>
        /// <param name="hideCallerId">Optional parameter: Specifies if the caller id will be hidden</param>
        /// <param name="record">Optional parameter: Specifies if the call should be recorded</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion</param>
        /// <param name="recordCallBackMethod">Optional parameter: Method used to request the RecordCallback URL.</param>
        /// <param name="transcribe">Optional parameter: Specifies if the call recording should be transcribed</param>
        /// <param name="transcribeCallBackUrl">Optional parameter: Transcription parameters will be sent here upon completion</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateGroupCall(
                string mfrom,
                string to,
                string url,
                string groupConfirmKey,
                Models.GroupConfirmFileEnum groupConfirmFile,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallBackUrl = null,
                string fallBackMethod = null,
                string heartBeatUrl = null,
                string heartBeatMethod = null,
                int? timeout = null,
                string playDtmf = null,
                string hideCallerId = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                bool? transcribe = null,
                string transcribeCallBackUrl = null)
        {
            Task<string> t = CreateGroupCallAsync(mfrom, to, url, groupConfirmKey, groupConfirmFile, method, statusCallBackUrl, statusCallBackMethod, fallBackUrl, fallBackMethod, heartBeatUrl, heartBeatMethod, timeout, playDtmf, hideCallerId, record, recordCallBackUrl, recordCallBackMethod, transcribe, transcribeCallBackUrl);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Group Call
        /// </summary>
        /// <param name="mfrom">Required parameter: This number to display on Caller ID as calling</param>
        /// <param name="to">Required parameter: Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : 1111111111,2222222222</param>
        /// <param name="url">Required parameter: URL requested once the call connects</param>
        /// <param name="groupConfirmKey">Required parameter: Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *</param>
        /// <param name="groupConfirmFile">Required parameter: Specify the audio file you want to play when the called party picks up the call</param>
        /// <param name="method">Optional parameter: Specifies the HTTP method used to request the required URL once call connects.</param>
        /// <param name="statusCallBackUrl">Optional parameter: URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.</param>
        /// <param name="statusCallBackMethod">Optional parameter: Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.</param>
        /// <param name="fallBackUrl">Optional parameter: URL requested if the initial Url parameter fails or encounters an error</param>
        /// <param name="fallBackMethod">Optional parameter: Specifies the HTTP method used to request the required FallbackUrl once call connects.</param>
        /// <param name="heartBeatUrl">Optional parameter: URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.</param>
        /// <param name="heartBeatMethod">Optional parameter: Specifies the HTTP method used to request HeartbeatUrl.</param>
        /// <param name="timeout">Optional parameter: Time (in seconds) we should wait while the call is ringing before canceling the call</param>
        /// <param name="playDtmf">Optional parameter: DTMF Digits to play to the call once it connects. 0-9, #, or *</param>
        /// <param name="hideCallerId">Optional parameter: Specifies if the caller id will be hidden</param>
        /// <param name="record">Optional parameter: Specifies if the call should be recorded</param>
        /// <param name="recordCallBackUrl">Optional parameter: Recording parameters will be sent here upon completion</param>
        /// <param name="recordCallBackMethod">Optional parameter: Method used to request the RecordCallback URL.</param>
        /// <param name="transcribe">Optional parameter: Specifies if the call recording should be transcribed</param>
        /// <param name="transcribeCallBackUrl">Optional parameter: Transcription parameters will be sent here upon completion</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateGroupCallAsync(
                string mfrom,
                string to,
                string url,
                string groupConfirmKey,
                Models.GroupConfirmFileEnum groupConfirmFile,
                string method = null,
                string statusCallBackUrl = null,
                string statusCallBackMethod = null,
                string fallBackUrl = null,
                string fallBackMethod = null,
                string heartBeatUrl = null,
                string heartBeatMethod = null,
                int? timeout = null,
                string playDtmf = null,
                string hideCallerId = null,
                bool? record = null,
                string recordCallBackUrl = null,
                string recordCallBackMethod = null,
                bool? transcribe = null,
                string transcribeCallBackUrl = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/groupcall.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "Url", url ),
                new KeyValuePair<string, object>( "GroupConfirmKey", groupConfirmKey ),
                new KeyValuePair<string, object>( "GroupConfirmFile", Models.GroupConfirmFileEnumHelper.ToValue(groupConfirmFile) ),
                new KeyValuePair<string, object>( "Method", method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", statusCallBackUrl ),
                new KeyValuePair<string, object>( "StatusCallBackMethod", statusCallBackMethod ),
                new KeyValuePair<string, object>( "FallBackUrl", fallBackUrl ),
                new KeyValuePair<string, object>( "FallBackMethod", fallBackMethod ),
                new KeyValuePair<string, object>( "HeartBeatUrl", heartBeatUrl ),
                new KeyValuePair<string, object>( "HeartBeatMethod", heartBeatMethod ),
                new KeyValuePair<string, object>( "Timeout", timeout ),
                new KeyValuePair<string, object>( "PlayDtmf", playDtmf ),
                new KeyValuePair<string, object>( "HideCallerId", hideCallerId ),
                new KeyValuePair<string, object>( "Record", record ),
                new KeyValuePair<string, object>( "RecordCallBackUrl", recordCallBackUrl ),
                new KeyValuePair<string, object>( "RecordCallBackMethod", recordCallBackMethod ),
                new KeyValuePair<string, object>( "Transcribe", transcribe ),
                new KeyValuePair<string, object>( "TranscribeCallBackUrl", transcribeCallBackUrl )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 