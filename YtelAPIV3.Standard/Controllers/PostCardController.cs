/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class PostCardController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PostCardController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PostCardController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PostCardController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Remove a postcard object.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier of a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateDeletePostcard(string postcardid)
        {
            Task<string> t = CreateDeletePostcardAsync(postcardid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a postcard object.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier of a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateDeletePostcardAsync(string postcardid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/deletepostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "postcardid", postcardid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier for a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateViewPostcard(string postcardid)
        {
            Task<string> t = CreateViewPostcardAsync(postcardid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier for a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateViewPostcardAsync(string postcardid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/viewpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "postcardid", postcardid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <param name="to">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="mfrom">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Required parameter: Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">Required parameter: A 4.25"x6.25" or 6.25"x11.25" image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">Required parameter: A 4.25"x6.25" or 6.25"x11.25" image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">Required parameter: The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Required parameter: Code for the dimensions of the media to be printed.</param>
        /// <param name="description">Optional parameter: A description for the postcard.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreatePostcard(
                string to,
                string mfrom,
                string attachbyid,
                string front,
                string back,
                string message,
                string setting,
                string description = null,
                string htmldata = null)
        {
            Task<string> t = CreatePostcardAsync(to, mfrom, attachbyid, front, back, message, setting, description, htmldata);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <param name="to">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="mfrom">Required parameter: The AddressId or an object structured when creating an address by addresses/Create.</param>
        /// <param name="attachbyid">Required parameter: Set an existing postcard by attaching its PostcardId.</param>
        /// <param name="front">Required parameter: A 4.25"x6.25" or 6.25"x11.25" image to use as the front of the postcard.  This can be a URL, local file, or an HTML string. Supported file types are PDF, PNG, and JPEG.</param>
        /// <param name="back">Required parameter: A 4.25"x6.25" or 6.25"x11.25" image to use as the back of the postcard, supplied as a URL, local file, or HTML string.  This allows you to customize your back design, but we will still insert the recipient address for you.</param>
        /// <param name="message">Required parameter: The message for the back of the postcard with a maximum of 350 characters.</param>
        /// <param name="setting">Required parameter: Code for the dimensions of the media to be printed.</param>
        /// <param name="description">Optional parameter: A description for the postcard.</param>
        /// <param name="htmldata">Optional parameter: A string value that contains HTML markup.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreatePostcardAsync(
                string to,
                string mfrom,
                string attachbyid,
                string front,
                string back,
                string message,
                string setting,
                string description = null,
                string htmldata = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/createpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "to", to ),
                new KeyValuePair<string, object>( "from", mfrom ),
                new KeyValuePair<string, object>( "attachbyid", attachbyid ),
                new KeyValuePair<string, object>( "front", front ),
                new KeyValuePair<string, object>( "back", back ),
                new KeyValuePair<string, object>( "message", message ),
                new KeyValuePair<string, object>( "setting", setting ),
                new KeyValuePair<string, object>( "description", description ),
                new KeyValuePair<string, object>( "htmldata", htmldata )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="postcardid">Optional parameter: The unique identifier for a postcard object.</param>
        /// <param name="dateCreated">Optional parameter: The date the postcard was created.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListPostcards(
                int? page = null,
                int? pagesize = null,
                string postcardid = null,
                string dateCreated = null)
        {
            Task<string> t = CreateListPostcardsAsync(page, pagesize, postcardid, dateCreated);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <param name="page">Optional parameter: The page count to retrieve from the total results in the collection. Page indexing starts at 1.</param>
        /// <param name="pagesize">Optional parameter: The count of objects to return per page.</param>
        /// <param name="postcardid">Optional parameter: The unique identifier for a postcard object.</param>
        /// <param name="dateCreated">Optional parameter: The date the postcard was created.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListPostcardsAsync(
                int? page = null,
                int? pagesize = null,
                string postcardid = null,
                string dateCreated = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/listpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "page", page ),
                new KeyValuePair<string, object>( "pagesize", pagesize ),
                new KeyValuePair<string, object>( "postcardid", postcardid ),
                new KeyValuePair<string, object>( "dateCreated", dateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 