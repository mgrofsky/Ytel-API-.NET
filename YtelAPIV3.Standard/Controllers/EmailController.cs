/*
 * YtelAPIV3.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPIV3.Standard;
using YtelAPIV3.Standard.Utilities;
using YtelAPIV3.Standard.Http.Request;
using YtelAPIV3.Standard.Http.Response;
using YtelAPIV3.Standard.Http.Client;
using YtelAPIV3.Standard.Exceptions;

namespace YtelAPIV3.Standard.Controllers
{
    public partial class EmailController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static EmailController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static EmailController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new EmailController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Remove an email from the invalid email list.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the invalid email list.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRemoveInvalidEmail(string email)
        {
            Task<string> t = CreateRemoveInvalidEmailAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email from the invalid email list.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the invalid email list.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRemoveInvalidEmailAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/deleteinvalidemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of blocked emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateBlockedEmails(string offset = null, string limit = null)
        {
            Task<string> t = CreateBlockedEmailsAsync(offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of emails that have been blocked.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of blocked emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateBlockedEmailsAsync(string offset = null, string limit = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/listblockemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Offset", offset ),
                new KeyValuePair<string, object>( "Limit", limit )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of spam emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateSpamEmails(string offset = null, string limit = null)
        {
            Task<string> t = CreateSpamEmailsAsync(offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of emails that are on the spam list.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of spam emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateSpamEmailsAsync(string offset = null, string limit = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/listspamemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Offset", offset ),
                new KeyValuePair<string, object>( "Limit", limit )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of emails that have bounced.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of bounced emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateBouncedEmails(string offset = null, string limit = null)
        {
            Task<string> t = CreateBouncedEmailsAsync(offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of emails that have bounced.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of bounced emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateBouncedEmailsAsync(string offset = null, string limit = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/listbounceemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Offset", offset ),
                new KeyValuePair<string, object>( "Limit", limit )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove an email address from the bounced list.
        /// </summary>
        /// <param name="email">Required parameter: The email address to be remove from the bounced email list.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRemoveBouncedEmail(string email)
        {
            Task<string> t = CreateRemoveBouncedEmailAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email address from the bounced list.
        /// </summary>
        /// <param name="email">Required parameter: The email address to be remove from the bounced email list.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRemoveBouncedEmailAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/deletebouncesemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of invalid email addresses.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of invalid emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateInvalidEmails(string offset = null, string limit = null)
        {
            Task<string> t = CreateInvalidEmailsAsync(offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of invalid email addresses.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of invalid emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateInvalidEmailsAsync(string offset = null, string limit = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/listinvalidemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Offset", offset ),
                new KeyValuePair<string, object>( "Limit", limit )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of unsubscribed emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateListUnsubscribedEmails(string offset = null, string limit = null)
        {
            Task<string> t = CreateListUnsubscribedEmailsAsync(offset, limit);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of email addresses from the unsubscribe list.
        /// </summary>
        /// <param name="offset">Optional parameter: The starting point of the list of unsubscribed emails that should be returned.</param>
        /// <param name="limit">Optional parameter: The count of results that should be returned.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateListUnsubscribedEmailsAsync(string offset = null, string limit = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/listunsubscribedemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Offset", offset ),
                new KeyValuePair<string, object>( "Limit", limit )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the unsubscribe list.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRemoveUnsubscribedEmail(string email)
        {
            Task<string> t = CreateRemoveUnsubscribedEmailAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email address from the list of unsubscribed emails.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the unsubscribe list.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRemoveUnsubscribedEmailAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/deleteunsubscribedemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add an email to the unsubscribe list
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be added to the unsubscribe list</param>
        /// <return>Returns the string response from the API call</return>
        public string AddEmailUnsubscribe(string email)
        {
            Task<string> t = AddEmailUnsubscribeAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add an email to the unsubscribe list
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be added to the unsubscribe list</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> AddEmailUnsubscribeAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/addunsubscribesemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove an email from blocked emails list.
        /// </summary>
        /// <param name="email">Required parameter: The email address to be remove from the blocked list.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRemoveBlockedAddress(string email)
        {
            Task<string> t = CreateRemoveBlockedAddressAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email from blocked emails list.
        /// </summary>
        /// <param name="email">Required parameter: The email address to be remove from the blocked list.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRemoveBlockedAddressAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/deleteblocksemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove an email from the spam email list.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the spam list.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateRemoveSpamAddress(string email)
        {
            Task<string> t = CreateRemoveSpamAddressAsync(email);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove an email from the spam email list.
        /// </summary>
        /// <param name="email">Required parameter: A valid email address that is to be remove from the spam list.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateRemoveSpamAddressAsync(string email)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/deletespamemail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Email", email )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <param name="to">Required parameter: A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Required parameter: Specifies the type of email to be sent</param>
        /// <param name="subject">Required parameter: The subject of the mail. Must be a valid string.</param>
        /// <param name="message">Required parameter: The email message that is to be sent in the text.</param>
        /// <param name="mfrom">Optional parameter: A valid address that will send the email.</param>
        /// <param name="cc">Optional parameter: Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="bcc">Optional parameter: Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="attachment">Optional parameter: A file that is attached to the email. Must be less than 7 MB in size.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateSendEmail(
                string to,
                Models.TypeEnum type,
                string subject,
                string message,
                string mfrom = null,
                string cc = null,
                string bcc = null,
                string attachment = null)
        {
            Task<string> t = CreateSendEmailAsync(to, type, subject, message, mfrom, cc, bcc, attachment);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create and submit an email message to one or more email addresses.
        /// </summary>
        /// <param name="to">Required parameter: A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="type">Required parameter: Specifies the type of email to be sent</param>
        /// <param name="subject">Required parameter: The subject of the mail. Must be a valid string.</param>
        /// <param name="message">Required parameter: The email message that is to be sent in the text.</param>
        /// <param name="mfrom">Optional parameter: A valid address that will send the email.</param>
        /// <param name="cc">Optional parameter: Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="bcc">Optional parameter: Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.</param>
        /// <param name="attachment">Optional parameter: A file that is attached to the email. Must be less than 7 MB in size.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateSendEmailAsync(
                string to,
                Models.TypeEnum type,
                string subject,
                string message,
                string mfrom = null,
                string cc = null,
                string bcc = null,
                string attachment = null)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/email/sendemails.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "To", to ),
                new KeyValuePair<string, object>( "Type", Models.TypeEnumHelper.ToValue(type) ),
                new KeyValuePair<string, object>( "Subject", subject ),
                new KeyValuePair<string, object>( "Message", message ),
                new KeyValuePair<string, object>( "From", mfrom ),
                new KeyValuePair<string, object>( "Cc", cc ),
                new KeyValuePair<string, object>( "Bcc", bcc ),
                new KeyValuePair<string, object>( "Attachment", attachment )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 